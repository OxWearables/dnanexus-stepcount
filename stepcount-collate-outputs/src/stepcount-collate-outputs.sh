#!/bin/bash
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

set -euo pipefail -E
# set -x  # turn on execution tracing

main() {

    echo Input file ID: "$input_file"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    # Recover the original name of the input file
    local_input_file=$(dx describe "$input_file" --name)
    echo Input file name: "$local_input_file"

    # Download the input text file to the local file system
    dx download "$input_file" -o "$local_input_file"

    # Function to download a file
    download() {
        local path="$1"
        path=${path%$'\r'}  # strip Windows-style carriage returns
        if ! dx download "$path" -o files/ -f --lightweight; then
            echo "FAILED: $path" >&2
            # exit 1  # Uncomment to abort on failure
        fi
    }

    echo "Downloading files listed in $local_input_file..."
    mkdir -p files/
    max_jobs=4
    current=0
    total=$(wc -l < "$local_input_file")
    next_pct=10
    while IFS=$'\r' read -r line; do
        current=$((current+1))
        curr_pct=$((current * 100 / total))
        if (( curr_pct >= next_pct )) || (( current == total )); then
            echo "Progress: $current/$total..."
            next_pct=$((next_pct + 10))
        fi
        download "$line" &
        # Throttle: wait for a job to finish if we're at limit
        if (( $(jobs -rp | wc -l) >= max_jobs )); then
            wait -n
        fi
    done < "$local_input_file"
    wait  # wait till all background jobs finish
    echo "Finished downloading files."

    # Core functionality begins here. Use the stepcount-collate-outputs utility
    # to collate the files. By default, the results will be saved in the
    # 'collated-outputs/' directory.
    stepcount-collate-outputs files/

    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # To upload results, move them to the directory ~/out/<OUTPUT_DIR>/ then run
    # `dx-upload-all-outputs`. The OUTPUT_DIR must be defined in the
    # 'outputSpec' section of dxapp.json.
    mkdir -p ~/out/outputs/
    mv collated-outputs ~/out/outputs/
    dx-upload-all-outputs

}
