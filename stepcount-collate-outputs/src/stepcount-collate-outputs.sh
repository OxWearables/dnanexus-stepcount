#!/bin/bash
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo Input file ID: "$input_file"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    # Recover the original name of the input file
    local_input_file=$(dx describe "$input_file" --name)
    echo Input file name: "$local_input_file"

    # Download the input text file to the local file system
    dx download "$input_file" -o "$local_input_file"

    # Now download each file listed in the provided text file
    mkdir -p files/
    tr -d '\r' < "$local_input_file" | while IFS= read -r line; do
        dx download "$line" -o files/ -f
    done

    # Core functionality begins here. Use the stepcount-collate-outputs utility
    # to collate the files. By default, the results will be saved in the
    # 'collated-outputs/' directory.
    stepcount-collate-outputs files/

    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # To upload results, move them to the directory ~/out/<OUTPUT_DIR>/ then run
    # `dx-upload-all-outputs`. The OUTPUT_DIR must be defined in the
    # 'outputSpec' section of dxapp.json.
    mkdir -p ~/out/outputs/
    mv collated-outputs ~/out/outputs/
    dx-upload-all-outputs

}
